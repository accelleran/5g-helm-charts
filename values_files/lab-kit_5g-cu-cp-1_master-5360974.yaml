global:

  # Kubernetes Advertise Address
  #   Description: Used as External address for services
  #   Value type: string
  #
  kubeIp: "10.55.1.2"


  # CU-CP Instance ID
  #   Description:  The Instance ID of the CU-CP component that
  #                 will be used in the bootstrap file.
  #                 The Instance ID must consist of lower case alphanumeric characters
  #                 or '-', start with an alphabetic character, and end with an alphanumeric
  #                 character (e.g. 'my-name',  or 'abc-123', regex used for validation is
  #                 '^[a-z0-9-]+$'). The Instance ID also cannot be longer than 54 alphanumeric characters!
  #
  #   Example:
  # instanceId: "cucp-1"
  #
  instanceId: "cucp-1"

  # Number of supported components
  #   Description:  You have to specify the amount of different components that should be supported.
  #                 Therefore, you have to specify:
  #                 - the number of AMFs that will be used
  #                 - the number of CU-UPs that will be used
  #                 - the number of DUs that will be used
  #                 - the number of CELLSs that will be used
  #                   i.e. DU1 supporting 3 cells and DU2 supported 2 cells => numOfCells: 5
  #                 - the number of UEs that will be used
  numOfAmfs: 1
  numOfCuUps: 2
  numOfDus: 1
  numOfCells: 1
  numOfUes: 1

  # NATS URL and PORT
  #   Description: Used to configure the application to talk
  #                to NATS
  #   Value type: string
  #
  natsUrl: "10.55.1.2"
  natsPort: "31100"


  # Version of the 5G applications
  #   Description: This is the version of the 5G applications
  #                in DockerHub.
  #   Value type: string
  #
  tag: "master-5360974"


  # Redis settings
  #   Description: Certain application need to be able to reach
  #                Redis. Here we configure the Redis hostname
  #                and port.
  #   Value type: string
  #   Example:
  #
  redisHostname: "10.55.1.2"
  redisPort: "32200"


  # dRAX Specific Node Selector
  #   Description: This is a special nodeSelector field implemented for the
  #                Accelleran 5G Helm charts. You need to first label your
  #                node in Kubernetes with a label "draxName" and give it a
  #                <value>. For example for node <node_name>, you can use the
  #                following command to label it:
  #                kubectl label node <node_name> draxName=<value>.
  #                You can then enabled this feature by setting
  #                "draxNodeSelectorEnabled" to "true" (as a string with quotes!).
  #                The in "draxName" set the value of the label you chose for
  #                the node. This will in effect install all the 5G Application
  #                on that node, without the need to edit all individual helm
  #                charts. In case you want to add other nodeSelector options,
  #                you have to add them to the helm chart specific values files.
  #   Value type: string
  #   Example:
  #
  draxNodeSelectorEnabled: "false"
  draxName: "main"


acc-fiveg-netconf:

  # NodePort for the NetConf service
  #   Description:  You can select a specific port for each CU-CP instance, or leave it
  #                 to the LoadBalancer to randomly select a free NodePort.
  #   Example:
  #
  # netconfService:
  #   nodePort: 31832
  #
  netconfService:
    nodePort: 31832


acc-fiveg-ds-ctrl:

  # Arguments for the 5G application
  #   Description:  The arguments for the 5G application run command are specified here. The
  #                 field args is a list. Each list items is a map of 2 fields:
  #                 i) name - the name of the argument
  #                 ii) values - the value of the argument
  #   Value type:   string
  #   Example:
  #
  # args:
  #   - name: "--rel_msec"
  #     value: "0"
  #
  args:
    - name: "--rel_msec"
      value: "500"

acc-fiveg-sctp:

  # F1 Service Settings
  #   Description:  The settings of the F1 service exposed for this component. You can leave the
  #                 LoadBalancer to give an IP address or you can manually select an IP from the
  #                 IP pool of the LoadBalancer. By default we leave the LoadBalancer to assign an IP.
  #                 The POD has a mechanism to discover which ever IP is given.
  #
  # f1Service:
  #   loadBalancerIP: "10.55.1.31"
  #
  f1Service:
    loadBalancerIP: "10.55.1.49"


  # E1 Service Settings
  #   Description:  The settings of the E1 service exposed for this component. You can leave the
  #                 LoadBalancer to give an IP address or you can manually select an IP from the
  #                 IP pool of the LoadBalancer. By default we leave the LoadBalancer to assign an IP.
  #                 The POD has a mechanism to discover which ever IP is given.
  #
  # e1Service:
  #   loadBalancerIP: "10.55.1.32"
  #
  e1Service:
    loadBalancerIP: "10.55.1.50"






